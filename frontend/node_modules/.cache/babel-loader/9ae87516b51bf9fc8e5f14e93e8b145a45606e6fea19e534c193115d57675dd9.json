{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  profile: null,\n  addresses: [],\n  favorites: [],\n  preferences: {\n    language: 'en',\n    currency: 'USD',\n    notifications: {\n      orderUpdates: true,\n      promotions: true,\n      recommendations: true,\n      email: true,\n      sms: false\n    },\n    dietary: {\n      isVegetarian: false,\n      isVegan: false,\n      allergens: []\n    }\n  },\n  isLoading: false,\n  error: null\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    // Profile\n    fetchProfileStart: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    fetchProfileSuccess: (state, action) => {\n      state.isLoading = false;\n      state.profile = action.payload;\n      state.error = null;\n    },\n    fetchProfileFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    updateProfileSuccess: (state, action) => {\n      state.profile = {\n        ...state.profile,\n        ...action.payload\n      };\n    },\n    // Addresses\n    fetchAddressesSuccess: (state, action) => {\n      state.addresses = action.payload;\n    },\n    addAddress: (state, action) => {\n      state.addresses.push(action.payload);\n    },\n    updateAddress: (state, action) => {\n      const {\n        id,\n        ...updates\n      } = action.payload;\n      const index = state.addresses.findIndex(addr => addr.id === id);\n      if (index !== -1) {\n        state.addresses[index] = {\n          ...state.addresses[index],\n          ...updates\n        };\n      }\n    },\n    removeAddress: (state, action) => {\n      state.addresses = state.addresses.filter(addr => addr.id !== action.payload);\n    },\n    setDefaultAddress: (state, action) => {\n      const addressId = action.payload;\n      state.addresses = state.addresses.map(addr => ({\n        ...addr,\n        isDefault: addr.id === addressId\n      }));\n    },\n    // Favorites\n    fetchFavoritesSuccess: (state, action) => {\n      state.favorites = action.payload;\n    },\n    addToFavorites: (state, action) => {\n      const restaurant = action.payload;\n      const exists = state.favorites.find(fav => fav.id === restaurant.id);\n      if (!exists) {\n        state.favorites.push(restaurant);\n      }\n    },\n    removeFromFavorites: (state, action) => {\n      const restaurantId = action.payload;\n      state.favorites = state.favorites.filter(fav => fav.id !== restaurantId);\n    },\n    // Preferences\n    updatePreferences: (state, action) => {\n      state.preferences = {\n        ...state.preferences,\n        ...action.payload\n      };\n    },\n    updateNotificationPreferences: (state, action) => {\n      state.preferences.notifications = {\n        ...state.preferences.notifications,\n        ...action.payload\n      };\n    },\n    updateDietaryPreferences: (state, action) => {\n      state.preferences.dietary = {\n        ...state.preferences.dietary,\n        ...action.payload\n      };\n    },\n    // Clear data\n    clearUserData: state => {\n      state.profile = null;\n      state.addresses = [];\n      state.favorites = [];\n      state.preferences = initialState.preferences;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  }\n});\nexport const {\n  fetchProfileStart,\n  fetchProfileSuccess,\n  fetchProfileFailure,\n  updateProfileSuccess,\n  fetchAddressesSuccess,\n  addAddress,\n  updateAddress,\n  removeAddress,\n  setDefaultAddress,\n  fetchFavoritesSuccess,\n  addToFavorites,\n  removeFromFavorites,\n  updatePreferences,\n  updateNotificationPreferences,\n  updateDietaryPreferences,\n  clearUserData,\n  clearError\n} = userSlice.actions;\nexport default userSlice.reducer;\n\n// Selectors\nexport const selectUserProfile = state => state.user.profile;\nexport const selectUserAddresses = state => state.user.addresses;\nexport const selectDefaultAddress = state => state.user.addresses.find(addr => addr.isDefault) || state.user.addresses[0];\nexport const selectUserFavorites = state => state.user.favorites;\nexport const selectUserPreferences = state => state.user.preferences;\nexport const selectUserLoading = state => state.user.isLoading;\nexport const selectUserError = state => state.user.error;","map":{"version":3,"names":["createSlice","initialState","profile","addresses","favorites","preferences","language","currency","notifications","orderUpdates","promotions","recommendations","email","sms","dietary","isVegetarian","isVegan","allergens","isLoading","error","userSlice","name","reducers","fetchProfileStart","state","fetchProfileSuccess","action","payload","fetchProfileFailure","updateProfileSuccess","fetchAddressesSuccess","addAddress","push","updateAddress","id","updates","index","findIndex","addr","removeAddress","filter","setDefaultAddress","addressId","map","isDefault","fetchFavoritesSuccess","addToFavorites","restaurant","exists","find","fav","removeFromFavorites","restaurantId","updatePreferences","updateNotificationPreferences","updateDietaryPreferences","clearUserData","clearError","actions","reducer","selectUserProfile","user","selectUserAddresses","selectDefaultAddress","selectUserFavorites","selectUserPreferences","selectUserLoading","selectUserError"],"sources":["C:/Users/Venkat/Downloads/Food_delivery_app/frontend/src/store/slices/userSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  profile: null,\r\n  addresses: [],\r\n  favorites: [],\r\n  preferences: {\r\n    language: 'en',\r\n    currency: 'USD',\r\n    notifications: {\r\n      orderUpdates: true,\r\n      promotions: true,\r\n      recommendations: true,\r\n      email: true,\r\n      sms: false,\r\n    },\r\n    dietary: {\r\n      isVegetarian: false,\r\n      isVegan: false,\r\n      allergens: [],\r\n    },\r\n  },\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    // Profile\r\n    fetchProfileStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    fetchProfileSuccess: (state, action) => {\r\n      state.isLoading = false;\r\n      state.profile = action.payload;\r\n      state.error = null;\r\n    },\r\n    fetchProfileFailure: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    updateProfileSuccess: (state, action) => {\r\n      state.profile = { ...state.profile, ...action.payload };\r\n    },\r\n\r\n    // Addresses\r\n    fetchAddressesSuccess: (state, action) => {\r\n      state.addresses = action.payload;\r\n    },\r\n    addAddress: (state, action) => {\r\n      state.addresses.push(action.payload);\r\n    },\r\n    updateAddress: (state, action) => {\r\n      const { id, ...updates } = action.payload;\r\n      const index = state.addresses.findIndex(addr => addr.id === id);\r\n      if (index !== -1) {\r\n        state.addresses[index] = { ...state.addresses[index], ...updates };\r\n      }\r\n    },\r\n    removeAddress: (state, action) => {\r\n      state.addresses = state.addresses.filter(addr => addr.id !== action.payload);\r\n    },\r\n    setDefaultAddress: (state, action) => {\r\n      const addressId = action.payload;\r\n      state.addresses = state.addresses.map(addr => ({\r\n        ...addr,\r\n        isDefault: addr.id === addressId,\r\n      }));\r\n    },\r\n\r\n    // Favorites\r\n    fetchFavoritesSuccess: (state, action) => {\r\n      state.favorites = action.payload;\r\n    },\r\n    addToFavorites: (state, action) => {\r\n      const restaurant = action.payload;\r\n      const exists = state.favorites.find(fav => fav.id === restaurant.id);\r\n      if (!exists) {\r\n        state.favorites.push(restaurant);\r\n      }\r\n    },\r\n    removeFromFavorites: (state, action) => {\r\n      const restaurantId = action.payload;\r\n      state.favorites = state.favorites.filter(fav => fav.id !== restaurantId);\r\n    },\r\n\r\n    // Preferences\r\n    updatePreferences: (state, action) => {\r\n      state.preferences = { ...state.preferences, ...action.payload };\r\n    },\r\n    updateNotificationPreferences: (state, action) => {\r\n      state.preferences.notifications = {\r\n        ...state.preferences.notifications,\r\n        ...action.payload,\r\n      };\r\n    },\r\n    updateDietaryPreferences: (state, action) => {\r\n      state.preferences.dietary = {\r\n        ...state.preferences.dietary,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    // Clear data\r\n    clearUserData: (state) => {\r\n      state.profile = null;\r\n      state.addresses = [];\r\n      state.favorites = [];\r\n      state.preferences = initialState.preferences;\r\n    },\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchProfileStart,\r\n  fetchProfileSuccess,\r\n  fetchProfileFailure,\r\n  updateProfileSuccess,\r\n  fetchAddressesSuccess,\r\n  addAddress,\r\n  updateAddress,\r\n  removeAddress,\r\n  setDefaultAddress,\r\n  fetchFavoritesSuccess,\r\n  addToFavorites,\r\n  removeFromFavorites,\r\n  updatePreferences,\r\n  updateNotificationPreferences,\r\n  updateDietaryPreferences,\r\n  clearUserData,\r\n  clearError,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n\r\n// Selectors\r\nexport const selectUserProfile = (state) => state.user.profile;\r\nexport const selectUserAddresses = (state) => state.user.addresses;\r\nexport const selectDefaultAddress = (state) => \r\n  state.user.addresses.find(addr => addr.isDefault) || state.user.addresses[0];\r\nexport const selectUserFavorites = (state) => state.user.favorites;\r\nexport const selectUserPreferences = (state) => state.user.preferences;\r\nexport const selectUserLoading = (state) => state.user.isLoading;\r\nexport const selectUserError = (state) => state.user.error;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}