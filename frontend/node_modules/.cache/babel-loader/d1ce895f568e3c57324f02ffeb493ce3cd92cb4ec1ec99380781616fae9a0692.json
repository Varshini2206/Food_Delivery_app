{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  // Cart items with structure: { menuItem, quantity, restaurantId, customizations }\n  restaurantId: null,\n  // Current restaurant for the cart\n  restaurantName: null,\n  totalAmount: 0,\n  itemCount: 0,\n  isOpen: false,\n  // Cart sidebar visibility\n  deliveryAddress: null,\n  deliveryFee: 0,\n  taxes: 0,\n  discounts: 0,\n  grandTotal: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const {\n        menuItem,\n        quantity = 1,\n        restaurantId,\n        restaurantName,\n        customizations = []\n      } = action.payload;\n\n      // If adding from different restaurant, clear cart and show warning\n      if (state.restaurantId && state.restaurantId !== restaurantId) {\n        state.items = [];\n        state.itemCount = 0;\n        state.totalAmount = 0;\n      }\n\n      // Set restaurant info\n      state.restaurantId = restaurantId;\n      state.restaurantName = restaurantName;\n\n      // Check if item already exists in cart\n      const existingItemIndex = state.items.findIndex(item => item.menuItem.id === menuItem.id && JSON.stringify(item.customizations) === JSON.stringify(customizations));\n      if (existingItemIndex !== -1) {\n        // Update quantity if item exists\n        state.items[existingItemIndex].quantity += quantity;\n      } else {\n        // Add new item\n        state.items.push({\n          menuItem,\n          quantity,\n          restaurantId,\n          customizations,\n          itemTotal: menuItem.price * quantity\n        });\n      }\n\n      // Recalculate totals\n      cartSlice.caseReducers.calculateTotals(state);\n    },\n    removeFromCart: (state, action) => {\n      const {\n        menuItemId,\n        customizations = []\n      } = action.payload;\n      state.items = state.items.filter(item => !(item.menuItem.id === menuItemId && JSON.stringify(item.customizations) === JSON.stringify(customizations)));\n\n      // Clear restaurant if cart is empty\n      if (state.items.length === 0) {\n        state.restaurantId = null;\n        state.restaurantName = null;\n      }\n      cartSlice.caseReducers.calculateTotals(state);\n    },\n    updateQuantity: (state, action) => {\n      const {\n        menuItemId,\n        quantity,\n        customizations = []\n      } = action.payload;\n      const itemIndex = state.items.findIndex(item => item.menuItem.id === menuItemId && JSON.stringify(item.customizations) === JSON.stringify(customizations));\n      if (itemIndex !== -1) {\n        if (quantity <= 0) {\n          state.items.splice(itemIndex, 1);\n        } else {\n          state.items[itemIndex].quantity = quantity;\n          state.items[itemIndex].itemTotal = state.items[itemIndex].menuItem.price * quantity;\n        }\n      }\n\n      // Clear restaurant if cart is empty\n      if (state.items.length === 0) {\n        state.restaurantId = null;\n        state.restaurantName = null;\n      }\n      cartSlice.caseReducers.calculateTotals(state);\n    },\n    clearCart: state => {\n      state.items = [];\n      state.restaurantId = null;\n      state.restaurantName = null;\n      state.totalAmount = 0;\n      state.itemCount = 0;\n      state.deliveryAddress = null;\n      state.deliveryFee = 0;\n      state.taxes = 0;\n      state.discounts = 0;\n      state.grandTotal = 0;\n    },\n    toggleCart: state => {\n      state.isOpen = !state.isOpen;\n    },\n    openCart: state => {\n      state.isOpen = true;\n    },\n    closeCart: state => {\n      state.isOpen = false;\n    },\n    setDeliveryAddress: (state, action) => {\n      state.deliveryAddress = action.payload;\n      // Recalculate delivery fee based on distance (mock calculation)\n      state.deliveryFee = action.payload ? 2.99 : 0;\n      cartSlice.caseReducers.calculateTotals(state);\n    },\n    applyDiscount: (state, action) => {\n      state.discounts = action.payload;\n      cartSlice.caseReducers.calculateTotals(state);\n    },\n    calculateTotals: state => {\n      // Calculate item count and subtotal\n      state.itemCount = state.items.reduce((count, item) => count + item.quantity, 0);\n      state.totalAmount = state.items.reduce((total, item) => total + item.itemTotal, 0);\n\n      // Calculate taxes (8% of subtotal)\n      state.taxes = state.totalAmount * 0.08;\n\n      // Calculate grand total\n      state.grandTotal = state.totalAmount + state.deliveryFee + state.taxes - state.discounts;\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  toggleCart,\n  openCart,\n  closeCart,\n  setDeliveryAddress,\n  applyDiscount,\n  calculateTotals\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n\n// Selectors\nexport const selectCart = state => state.cart;\nexport const selectCartItems = state => state.cart.items;\nexport const selectCartItemCount = state => state.cart.itemCount;\nexport const selectCartTotal = state => state.cart.totalAmount;\nexport const selectCartGrandTotal = state => state.cart.grandTotal;\nexport const selectCartRestaurant = state => ({\n  id: state.cart.restaurantId,\n  name: state.cart.restaurantName\n});\nexport const selectCartIsOpen = state => state.cart.isOpen;\nexport const selectDeliveryAddress = state => state.cart.deliveryAddress;","map":{"version":3,"names":["createSlice","initialState","items","restaurantId","restaurantName","totalAmount","itemCount","isOpen","deliveryAddress","deliveryFee","taxes","discounts","grandTotal","cartSlice","name","reducers","addToCart","state","action","menuItem","quantity","customizations","payload","existingItemIndex","findIndex","item","id","JSON","stringify","push","itemTotal","price","caseReducers","calculateTotals","removeFromCart","menuItemId","filter","length","updateQuantity","itemIndex","splice","clearCart","toggleCart","openCart","closeCart","setDeliveryAddress","applyDiscount","reduce","count","total","actions","reducer","selectCart","cart","selectCartItems","selectCartItemCount","selectCartTotal","selectCartGrandTotal","selectCartRestaurant","selectCartIsOpen","selectDeliveryAddress"],"sources":["C:/Users/Venkat/Downloads/Food_delivery_app/frontend/src/store/slices/cartSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  items: [], // Cart items with structure: { menuItem, quantity, restaurantId, customizations }\r\n  restaurantId: null, // Current restaurant for the cart\r\n  restaurantName: null,\r\n  totalAmount: 0,\r\n  itemCount: 0,\r\n  isOpen: false, // Cart sidebar visibility\r\n  deliveryAddress: null,\r\n  deliveryFee: 0,\r\n  taxes: 0,\r\n  discounts: 0,\r\n  grandTotal: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addToCart: (state, action) => {\r\n      const { menuItem, quantity = 1, restaurantId, restaurantName, customizations = [] } = action.payload;\r\n      \r\n      // If adding from different restaurant, clear cart and show warning\r\n      if (state.restaurantId && state.restaurantId !== restaurantId) {\r\n        state.items = [];\r\n        state.itemCount = 0;\r\n        state.totalAmount = 0;\r\n      }\r\n      \r\n      // Set restaurant info\r\n      state.restaurantId = restaurantId;\r\n      state.restaurantName = restaurantName;\r\n      \r\n      // Check if item already exists in cart\r\n      const existingItemIndex = state.items.findIndex(\r\n        item => item.menuItem.id === menuItem.id && \r\n        JSON.stringify(item.customizations) === JSON.stringify(customizations)\r\n      );\r\n      \r\n      if (existingItemIndex !== -1) {\r\n        // Update quantity if item exists\r\n        state.items[existingItemIndex].quantity += quantity;\r\n      } else {\r\n        // Add new item\r\n        state.items.push({\r\n          menuItem,\r\n          quantity,\r\n          restaurantId,\r\n          customizations,\r\n          itemTotal: menuItem.price * quantity,\r\n        });\r\n      }\r\n      \r\n      // Recalculate totals\r\n      cartSlice.caseReducers.calculateTotals(state);\r\n    },\r\n    \r\n    removeFromCart: (state, action) => {\r\n      const { menuItemId, customizations = [] } = action.payload;\r\n      \r\n      state.items = state.items.filter(\r\n        item => !(item.menuItem.id === menuItemId && \r\n        JSON.stringify(item.customizations) === JSON.stringify(customizations))\r\n      );\r\n      \r\n      // Clear restaurant if cart is empty\r\n      if (state.items.length === 0) {\r\n        state.restaurantId = null;\r\n        state.restaurantName = null;\r\n      }\r\n      \r\n      cartSlice.caseReducers.calculateTotals(state);\r\n    },\r\n    \r\n    updateQuantity: (state, action) => {\r\n      const { menuItemId, quantity, customizations = [] } = action.payload;\r\n      \r\n      const itemIndex = state.items.findIndex(\r\n        item => item.menuItem.id === menuItemId && \r\n        JSON.stringify(item.customizations) === JSON.stringify(customizations)\r\n      );\r\n      \r\n      if (itemIndex !== -1) {\r\n        if (quantity <= 0) {\r\n          state.items.splice(itemIndex, 1);\r\n        } else {\r\n          state.items[itemIndex].quantity = quantity;\r\n          state.items[itemIndex].itemTotal = state.items[itemIndex].menuItem.price * quantity;\r\n        }\r\n      }\r\n      \r\n      // Clear restaurant if cart is empty\r\n      if (state.items.length === 0) {\r\n        state.restaurantId = null;\r\n        state.restaurantName = null;\r\n      }\r\n      \r\n      cartSlice.caseReducers.calculateTotals(state);\r\n    },\r\n    \r\n    clearCart: (state) => {\r\n      state.items = [];\r\n      state.restaurantId = null;\r\n      state.restaurantName = null;\r\n      state.totalAmount = 0;\r\n      state.itemCount = 0;\r\n      state.deliveryAddress = null;\r\n      state.deliveryFee = 0;\r\n      state.taxes = 0;\r\n      state.discounts = 0;\r\n      state.grandTotal = 0;\r\n    },\r\n    \r\n    toggleCart: (state) => {\r\n      state.isOpen = !state.isOpen;\r\n    },\r\n    \r\n    openCart: (state) => {\r\n      state.isOpen = true;\r\n    },\r\n    \r\n    closeCart: (state) => {\r\n      state.isOpen = false;\r\n    },\r\n    \r\n    setDeliveryAddress: (state, action) => {\r\n      state.deliveryAddress = action.payload;\r\n      // Recalculate delivery fee based on distance (mock calculation)\r\n      state.deliveryFee = action.payload ? 2.99 : 0;\r\n      cartSlice.caseReducers.calculateTotals(state);\r\n    },\r\n    \r\n    applyDiscount: (state, action) => {\r\n      state.discounts = action.payload;\r\n      cartSlice.caseReducers.calculateTotals(state);\r\n    },\r\n    \r\n    calculateTotals: (state) => {\r\n      // Calculate item count and subtotal\r\n      state.itemCount = state.items.reduce((count, item) => count + item.quantity, 0);\r\n      state.totalAmount = state.items.reduce((total, item) => total + item.itemTotal, 0);\r\n      \r\n      // Calculate taxes (8% of subtotal)\r\n      state.taxes = state.totalAmount * 0.08;\r\n      \r\n      // Calculate grand total\r\n      state.grandTotal = state.totalAmount + state.deliveryFee + state.taxes - state.discounts;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addToCart,\r\n  removeFromCart,\r\n  updateQuantity,\r\n  clearCart,\r\n  toggleCart,\r\n  openCart,\r\n  closeCart,\r\n  setDeliveryAddress,\r\n  applyDiscount,\r\n  calculateTotals,\r\n} = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n\r\n// Selectors\r\nexport const selectCart = (state) => state.cart;\r\nexport const selectCartItems = (state) => state.cart.items;\r\nexport const selectCartItemCount = (state) => state.cart.itemCount;\r\nexport const selectCartTotal = (state) => state.cart.totalAmount;\r\nexport const selectCartGrandTotal = (state) => state.cart.grandTotal;\r\nexport const selectCartRestaurant = (state) => ({\r\n  id: state.cart.restaurantId,\r\n  name: state.cart.restaurantName,\r\n});\r\nexport const selectCartIsOpen = (state) => state.cart.isOpen;\r\nexport const selectDeliveryAddress = (state) => state.cart.deliveryAddress;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}